Zeropkg - Gerenciador de Pacotes Source-Based
=============================================

üìå Introdu√ß√£o
-------------
Zeropkg √© um gerenciador de pacotes baseado em fontes, inspirado em ports e no conceito de Linux From Scratch (LFS).
Ele permite baixar, construir, instalar, atualizar e remover programas a partir do c√≥digo-fonte, com suporte a chroot,
fakeroot, hooks e empacotamento.

üì¶ Depend√™ncias do Host
-----------------------
Antes de usar o Zeropkg, certifique-se de que seu sistema hospedeiro possui os seguintes pacotes:
- Python 3.8+
- git
- tar, xz, gzip, bzip2
- fakeroot
- gcc, binutils, make
- util-linux (mount, umount, etc.)
- bash, coreutils, findutils
- sqlite3

Diret√≥rios Padr√£o
-----------------
O Zeropkg utiliza uma √°rvore de diret√≥rios configur√°vel, definida em /etc/zeropkg/config.toml

Exemplo de estrutura padr√£o:
 /usr/lib/zeropkg/modules/   ‚Üí m√≥dulos Python do Zeropkg
 /usr/bin/zeropkg            ‚Üí execut√°vel CLI
 /usr/ports/                 ‚Üí reposit√≥rio de receitas (metafiles .toml)
 /usr/ports/distfiles/       ‚Üí cache de fontes baixados
 /var/zeropkg/build/         ‚Üí diret√≥rio tempor√°rio de builds
 /var/zeropkg/packages/      ‚Üí pacotes bin√°rios gerados (.tar.xz)
 /var/lib/zeropkg/           ‚Üí banco de dados instalado (SQLite)
 /etc/zeropkg/config.toml    ‚Üí configura√ß√£o principal

Exemplo de config.toml:
[paths]
root = "/"
cache_dir = "/usr/ports/distfiles"
build_root = "/var/zeropkg/build"
ports_dir = "/usr/ports"
db_path = "/var/lib/zeropkg/installed.sqlite3"

üìù Receita de Pacote
--------------------
Cada pacote √© descrito por um arquivo TOML. Exemplo (binutils-pass1.toml):

[package]
name = "binutils"
version = "2.41-pass1"
category = "toolchain"
description = "Binutils first pass"
homepage = "https://www.gnu.org/software/binutils/"
licenses = ["GPL-3.0-or-later"]

[source]
urls = ["https://ftp.gnu.org/gnu/binutils/binutils-2.41.tar.xz"]
sha256 = "SOMEHASH"

[build]
configure = "./configure --prefix=/tools --with-sysroot=$LFS --target=$LFS_TGT --disable-nls --disable-werror"
make = "make -j4"
install = "make install"

[build.env]
LFS = "/mnt/lfs"
LFS_TGT = "x86_64-lfs-linux-gnu"
PATH = "/mnt/lfs/tools/bin:/usr/bin:/bin"

‚öôÔ∏è Comandos do CLI
------------------
Uso geral:
    zeropkg [op√ß√µes]

Principais comandos:
    -i, --install PKG        Instala pacote (compila + instala)
    -r, --remove PKG[:VER]   Remove pacote
    -b, --build PKG          Constr√≥i pacote mas n√£o instala
    -u, --upgrade PKG        Atualiza pacote para nova vers√£o
    --upgrade-all            Atualiza todos os pacotes
    -U, --update             Escaneia novas vers√µes upstream
    --sync                   Sincroniza reposit√≥rio local com remoto
    --depclean               Remove depend√™ncias √≥rf√£s
    --revdep                 Verifica depend√™ncias reversas
    -s, --search QUERY       Busca pacotes por nome
    --info PKG               Mostra informa√ß√µes do pacote

Suporte LFS:
    --lfs-bootstrap          Constr√≥i toda a toolchain do LFS (ordem oficial)
    --lfs-step PKG           Constr√≥i um passo espec√≠fico do toolchain

Suporte Chroot:
    --enter-chroot           Abre shell ou executa comando dentro do chroot
    --enter-command CMD      Comando a ser executado dentro do chroot
    --chroot-env KV,...      Vari√°veis de ambiente para o chroot
    --cleanup-chroot         Desmonta todos os bind mounts do chroot

Flags adicionais:
    --root DIR               Define root alternativo (ex: /mnt/lfs)
    --dir-install DIR        Instala pacote em DIR ap√≥s build
    --cache-dir DIR          Cache de fontes
    --build-root DIR         Diret√≥rio tempor√°rio de build
    --ports-dir DIR          Diret√≥rio de receitas
    --db-path FILE           Banco de dados de pacotes
    --fakeroot               Usa fakeroot para preservar UID/GID
    --dry-run                Simula a√ß√µes sem execut√°-las

üî® Construindo o Toolchain LFS
------------------------------
1. Monte parti√ß√µes e exporte LFS=/mnt/lfs
2. Configure config.toml com root="/mnt/lfs"
3. Crie receitas .toml para cada passo do LFS (binutils-pass1, gcc-pass1, etc.)
4. Use o comando:
    zeropkg --lfs-bootstrap --root /mnt/lfs
   Isso executa a ordem oficial do livro:
     - Binutils pass1
     - GCC pass1
     - Linux Headers
     - Glibc
     - Binutils pass2
     - GCC pass2
5. Depois entre no chroot:
    zeropkg --enter-chroot --root /mnt/lfs
6. Continue a constru√ß√£o dentro do chroot.

‚úÖ Conclus√£o
------------
O Zeropkg oferece suporte total para constru√ß√£o de um sistema LFS,
com gerenciamento de depend√™ncias, empacotamento, instala√ß√£o em root alternativo,
e chroot seguro com suporte a rede.
Use receitas .toml bem definidas para controlar cada etapa.
